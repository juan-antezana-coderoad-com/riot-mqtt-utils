/****************************************
 * RIOT MQTT UTILS BUILD GRADLE VERSION *
 ****************************************/

import org.apache.tools.ant.taskdefs.condition.Os

/***********
 * PLUGINS *
 ***********/
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'pmd'

/****************
 * REPOSITORIES *
 ****************/
repositories {
    mavenLocal()
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

/****************
 * DEPENDENCIES *
 ****************/
dependencies {
    compile "org.slf4j:slf4j-log4j12:1.6.6"
    compile "commons-cli:commons-cli:1.2"
    compile "com.fasterxml.jackson.core:jackson-databind:2.5.0"
    // Yaml
    compile('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.6.1')

    // https://mvnrepository.com/artifact/com.google.guava/guava
    compile group: 'com.google.guava', name: 'guava', version: '19.0'

    //compile fileTree(dir: 'libs', include: '*.jar')
    compile fileTree(dir: 'libs', include: 'org.eclipse.paho.client.mqttv3-1.0.0.jar')

    // Lombok
    compile "org.projectlombok:lombok:1.16.10"

    // junit
    testCompile 'junit:junit:4.11'
}

/***************
 * SOURCE SETS *
 ***************/
sourceSets {
    unitTest {
        java.srcDir file('src/test/java')
        resources.srcDir file('src/test/resources')
    }
}

/*********
 * TASKS *
 *********/
task gitinfo( type:Exec ) {
    if( Os.isFamily( Os.FAMILY_WINDOWS ) )
    {
        //TODO skochanski: make it work in Windows
        commandLine 'cmd', '/c', "echo 'WARNING: gitinfo is not implemented in windows'"
    }
    else
    {
        commandLine './git-info.sh', version
        ignoreExitValue true
    }
}

processResources.dependsOn gitinfo

task fatJar( type: Jar ) {
    baseName = project.name + '-all'
    from {
        (configurations.runtime - configurations.provided).collect { it.isDirectory() ? it : zipTree(it) }
    }
            {
                //exclude '*slf4j*', 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
                exclude '*slf4j*', 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/LICENSE*', 'license*', 'LICENSE*', 'defaults.yaml'
            }
    //manifest { attributes 'Main-Class': 'com.tierconnect.riot.popdb.PopDBAll' }
    with jar
    dependsOn assemble
}

/*****************
 * CODE COVERAGE *
 *****************/
jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/reports/jacoco/html"
    }
}

test {
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
    finalizedBy jacocoTestReport
}

/*************
 * FIND BUGS *
 *************/
tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

findbugs {
    sourceSets = [sourceSets.main]
    ignoreFailures = true
}

/*******
 * PMD *
 *******/
tasks.withType(Pmd) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

pmd {
    ignoreFailures = true
}

task qualityCheck ( dependsOn: ['pmdMain', 'pmdTest', 'findbugsMain', 'findbugsTest'])

